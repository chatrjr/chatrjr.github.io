.pattern.node
  h3.pattern-title .post Components
  h4.pattern-subtitle .post-masthead
  .post-masthead
    .h1.post-masthead__title.u-justify-right A Post About Some Topic or Another
    .post-meta
      span.post-meta__date 05/12/1876
      span.post-meta__tags
        a.post-meta__link(href="#") some tag
        a.post-meta__link(href="#") other tag
        a.post-meta__link(href="#") different tag
  h4.pattern-subtitle .post-body
  .post-body
    :markdown
      ## No man, I don't eat pork

      Well, the way they make shows is, they make one show. That show's called a pilot. Then they show that show to the people who make shows, and on the strength of that one show they decide if they're going to make more shows. Some pilots get picked and become television programs. Some don't, become nothing. She starred in one of the ones that became nothing.

      ### I gotta piss

      Do you see any Teletubbies in here? Do you see a slender plastic tag clipped to my shirt with my name printed on it? Do you see a little Asian child with a blank expression on his face sitting outside on a mechanical helicopter that shakes when you put quarters in it? No? Well, that's what you see at a toy store. And you must think you're in a toy store, because you're here shopping for an infant named Jeb.

      #### Uuummmm, this is a tasty burger!

      Now that there is the Tec-9, a crappy spray gun from South Miami. This gun is advertised as the most popular gun in American crime. Do you believe that shit? It actually says that in the little book that comes with it: ```the most popular gun in American crime```. Like they're actually proud of that shit.
  h4.pattern-subtitle .post-code
  pre(data-line="3-10")
    code.language-python.
      # test python (sample from offlineimap)
       
      class ExitNotifyThread(Thread):
          """This class is designed to alert a "monitor" to the fact that a thread has
          exited and to provide for the ability for it to find out why."""
          def run(self):
              global exitthreads, profiledir
              self.threadid = thread.get_ident()
              try:
                  if not profiledir:          # normal case
                      Thread.run(self)
                  else:
                      try:
                          import cProfile as profile
                      except ImportError:
                          import profile
                      prof = profile.Profile()
                      try:
                          prof = prof.runctx("Thread.run(self)", globals(), locals())
                      except SystemExit:
                          pass
                      prof.dump_stats( \
                                  profiledir + "/" + str(self.threadid) + "_" + \
                                  self.getName() + ".prof")
              except:
                  self.setExitCause('EXCEPTION')
                  if sys:
                      self.setExitException(sys.exc_info()[1])
                      tb = traceback.format_exc()
                      self.setExitStackTrace(tb)
              else:
                  self.setExitCause('NORMAL')
              if not hasattr(self, 'exitmessage'):
                  self.setExitMessage(None)
       
              if exitthreads:
                  exitthreads.put(self, True)
       
          def setExitCause(self, cause):
              self.exitcause = cause
          def getExitCause(self):
              """Returns the cause of the exit, one of:
              'EXCEPTION' -- the thread aborted because of an exception
              'NORMAL' -- normal termination."""
              return self.exitcause
          def setExitException(self, exc):
              self.exitexception = exc
          def getExitException(self):
              """If getExitCause() is 'EXCEPTION', holds the value from
              sys.exc_info()[1] for this exception."""
              return self.exitexception
          def setExitStackTrace(self, st):
              self.exitstacktrace = st
          def getExitStackTrace(self):
              """If getExitCause() is 'EXCEPTION', returns a string representing
              the stack trace for this exception."""
              return self.exitstacktrace
          def setExitMessage(self, msg):
              """Sets the exit message to be fetched by a subsequent call to
              getExitMessage.  This message may be any object or type except
              None."""
              self.exitmessage = msg
          def getExitMessage(self):
              """For any exit cause, returns the message previously set by
              a call to setExitMessage(), or None if there was no such message
              set."""
              return self.exitmessage